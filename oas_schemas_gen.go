// Code generated by ogen, DO NOT EDIT.

package policeuk

type DatasourceAvailability []DatasourceAvailabilityItem

type DatasourceAvailabilityItem struct {
	// ISO-8601 formatted year and date.
	Date OptString `json:"date"`
	// List of police forces providing stop and search information for the given month and year.
	StopAndSearch []string `json:"stop-and-search"`
}

// GetDate returns the value of Date.
func (s *DatasourceAvailabilityItem) GetDate() OptString {
	return s.Date
}

// GetStopAndSearch returns the value of StopAndSearch.
func (s *DatasourceAvailabilityItem) GetStopAndSearch() []string {
	return s.StopAndSearch
}

// SetDate sets the value of Date.
func (s *DatasourceAvailabilityItem) SetDate(val OptString) {
	s.Date = val
}

// SetStopAndSearch sets the value of StopAndSearch.
func (s *DatasourceAvailabilityItem) SetStopAndSearch(val []string) {
	s.StopAndSearch = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
